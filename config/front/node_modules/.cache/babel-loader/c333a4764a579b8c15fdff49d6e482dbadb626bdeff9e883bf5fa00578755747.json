{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"strong\", null, \" Status of Project \", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_radio = _resolveComponent(\"v-radio\");\n  const _component_v_radio_group = _resolveComponent(\"v-radio-group\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createCommentVNode(\" <v-radio-group v-model=\\\"status\\\" inline @change=\\\"save\\\"> \"), _createVNode(_component_v_radio_group, {\n      modelValue: _ctx.status,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.status = $event),\n      inline: \"\"\n    }, {\n      label: _withCtx(() => [_hoisted_1]),\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.statusOptions, option => {\n        return _openBlock(), _createBlock(_component_v_radio, {\n          key: option.value,\n          value: option.value,\n          color: option.color\n        }, {\n          label: _withCtx(() => [_createElementVNode(\"strong\", null, _toDisplayString(option.name), 1 /* TEXT */)]),\n\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"value\", \"color\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAKgBA,oBAAoC,gBAA5B,qBAAmB;;;;;;uBAJvCC,aAiBcC;sBAhBV,MAA+D,CAA/DC,mFAA+D,EAC/DC,aAcgBC;kBAdQC,WAAM;iEAANA,WAAM;MAAEC,MAAM,EAAN;;MACXC,KAAK,WAClB,MAAoC,CAApCC,UAAoC;wBAGpC,MAA+B,oBADnCC,oBASUC,6BARWL,kBAAa,EAAvBM,MAAM;6BADjBX,aASUY;UAPLC,GAAG,EAAEF,MAAM,CAACG,KAAK;UACjBA,KAAK,EAAEH,MAAM,CAACG,KAAK;UACnBC,KAAK,EAAEJ,MAAM,CAACI;;UAEER,KAAK,WAClB,MAAkC,CAAlCR,oBAAkC,iCAAvBY,MAAM,CAACK,IAAI","names":["_createElementVNode","_createBlock","_component_v_container","_createCommentVNode","_createVNode","_component_v_radio_group","_ctx","inline","label","_hoisted_1","_createElementBlock","_Fragment","option","_component_v_radio","key","value","color","name"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\Project\\Manage\\ManageStatus.vue"],"sourcesContent":["<template>\r\n    <v-container>\r\n        <!-- <v-radio-group v-model=\"status\" inline @change=\"save\"> -->\r\n        <v-radio-group v-model=\"status\" inline>\r\n            <template v-slot:label>\r\n                <strong> Status of Project </strong>\r\n            </template>\r\n            <v-radio\r\n                v-for=\"option in statusOptions\"\r\n                :key=\"option.value\"\r\n                :value=\"option.value\"\r\n                :color=\"option.color\"\r\n            >\r\n                <template v-slot:label>\r\n                    <strong >{{option.name}} </strong>\r\n                </template>\r\n            </v-radio>\r\n        </v-radio-group>\r\n    </v-container>\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nimport axios from \"axios\"\r\nimport setToken from \"@/utils/auth.js\"\r\n\r\nlet url = \"http://127.0.0.1:8000/api/project/\";  // 장고 drf 서버 주소\r\n\r\nexport default {\r\n    name : \"ManageStatus\" , \r\n\r\n\r\n    data : () => {\r\n        return {\r\n                // route : useRoute(),\r\n                // router : useRouter(),\r\n                project_id : -1,\r\n                status : \"P\",\r\n                statusOptions : [\r\n                    {\r\n                        name : \"Prepare\",\r\n                        value : \"P\",\r\n                        color : \"orange\"\r\n                    },\r\n                    {\r\n                        name : \"Ready\",\r\n                        value : \"R\",\r\n                        color : \"success\"\r\n                    },\r\n                    {\r\n                        name : \"OnGoing\",\r\n                        value : \"O\",\r\n                        color : \"primary\"\r\n                    },\r\n                    {\r\n                        name : \"Done\",\r\n                        value : \"D\",\r\n                        color : \"error\"\r\n                    },                \r\n                ]\r\n        }\r\n    },\r\n\r\n\r\n    methods : {\r\n\r\n        getStatus : function(){\r\n            axios({\r\n                method : \"GET\",\r\n                url : url + this.$route.query.project_id + '/',\r\n                headers : setToken(),\r\n                params : {\r\n                    user_id : localStorage.getItem('user'),\r\n                }\r\n            }).then((response) => {\r\n                this.status = response.data.status\r\n\r\n                console.log(\"here\")\r\n                this.$router.replace({\r\n                    name : 'manage_status',\r\n                    query : {\r\n                        project_id : this.project.id\r\n                    }\r\n                })\r\n                console.log(\"here\")\r\n\r\n            }).catch((error) => {\r\n                console.log(\"Failed to get retreival\", error.response);\r\n            });\r\n        },\r\n\r\n        updateStatus : function(){\r\n             axios({\r\n                method : \"PATCH\",\r\n                url : url + this.project_id + '/',\r\n                headers : setToken(),\r\n                params : {\r\n                    project_id : this.project_id,\r\n                    status : this.status,\r\n                    action : 'status'\r\n                }\r\n            }).then((response) => {\r\n                console.log(response)\r\n            }).catch((error) => {\r\n                console.log(\"Failed to update status\", error.response);\r\n            });\r\n            \r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.status = this.$route.query.status\r\n        this.project_id = this.$route.query.project_id\r\n    },\r\n\r\n\r\n    watch : {\r\n        status : function(){\r\n            this.updateStatus()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}