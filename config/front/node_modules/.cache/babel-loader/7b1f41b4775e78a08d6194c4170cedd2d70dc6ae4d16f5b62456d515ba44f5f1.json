{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useToggleScope } from \"./toggleScope.mjs\";\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\nconst StackSymbol = Symbol.for('vuetify:stack');\nconst globalStack = reactive([]);\nexport function useStack(isActive, zIndex) {\n  const vm = getCurrentInstance('useStack');\n  const parent = inject(StackSymbol, undefined);\n  const stack = reactive({\n    activeChildren: new Set()\n  });\n  provide(StackSymbol, stack);\n  const _zIndex = ref(+zIndex.value);\n  useToggleScope(isActive, () => {\n    var _globalStack$at;\n    const lastZIndex = (_globalStack$at = globalStack.at(-1)) == null ? void 0 : _globalStack$at[1];\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value;\n    globalStack.push([vm.uid, _zIndex.value]);\n    parent == null ? void 0 : parent.activeChildren.add(vm.uid);\n    onScopeDispose(() => {\n      const idx = globalStack.findIndex(v => v[0] === vm.uid);\n      globalStack.splice(idx, 1);\n      parent == null ? void 0 : parent.activeChildren.delete(vm.uid);\n    });\n  });\n  const globalTop = ref(true);\n  watchEffect(() => {\n    var _globalStack$at2;\n    const _isTop = ((_globalStack$at2 = globalStack.at(-1)) == null ? void 0 : _globalStack$at2[0]) === vm.uid;\n    setTimeout(() => globalTop.value = _isTop);\n  });\n  const localTop = computed(() => !stack.activeChildren.size);\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({\n      zIndex: _zIndex.value\n    }))\n  };\n}","map":{"version":3,"mappings":";SAASA,cAAc;AAEvB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,cAAc,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,WAAW,QAAQ,KAAK;AAAA,SAC5FC,kBAAkB,6BAE3B;AAGA,MAAMC,WAAuC,GAAGC,MAAM,CAACC,GAAG,CAAC,eAAe,CAAC;AAM3E,MAAMC,WAAW,GAAGR,QAAQ,CAAkC,EAAE,CAAC;AAEjE,OAAO,SAASS,QAAQ,CAAEC,QAAgC,EAAEC,MAAsC,EAAE;EAClG,MAAMC,EAAE,GAAGR,kBAAkB,CAAC,UAAU,CAAC;EAEzC,MAAMS,MAAM,GAAGhB,MAAM,CAACQ,WAAW,EAAES,SAAS,CAAC;EAC7C,MAAMC,KAAmB,GAAGf,QAAQ,CAAC;IACnCgB,cAAc,EAAE,IAAIC,GAAG;EACzB,CAAC,CAAC;EACFlB,OAAO,CAACM,WAAW,EAAEU,KAAK,CAAC;EAE3B,MAAMG,OAAO,GAAGhB,GAAG,CAAC,CAACS,MAAM,CAACQ,KAAK,CAAC;EAClCxB,cAAc,CAACe,QAAQ,EAAE,MAAM;IAAA;IAC7B,MAAMU,UAAU,sBAAGZ,WAAW,CAACa,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAlBC,gBAAqB,CAAC,CAAC;IAC1CJ,OAAO,CAACC,KAAK,GAAGC,UAAU,GAAGA,UAAU,GAAG,EAAE,GAAG,CAACT,MAAM,CAACQ,KAAK;IAC5DX,WAAW,CAACe,IAAI,CAAC,CAACX,EAAE,CAACY,GAAG,EAAEN,OAAO,CAACC,KAAK,CAAC,CAAC;IAEzCN,MAAM,oBAANA,MAAM,CAAEG,cAAc,CAACS,GAAG,CAACb,EAAE,CAACY,GAAG,CAAC;IAElC1B,cAAc,CAAC,MAAM;MACnB,MAAM4B,GAAG,GAAGlB,WAAW,CAACmB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAKhB,EAAE,CAACY,GAAG,CAAC;MACvDhB,WAAW,CAACqB,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC;MAE1Bb,MAAM,oBAANA,MAAM,CAAEG,cAAc,CAACc,MAAM,CAAClB,EAAE,CAACY,GAAG,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMO,SAAS,GAAG7B,GAAG,CAAC,IAAI,CAAC;EAC3BC,WAAW,CAAC,MAAM;IAAA;IAChB,MAAM6B,MAAM,GAAG,gCAAW,CAACX,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAlBY,iBAAqB,CAAC,CAAC,MAAKrB,EAAE,CAACY,GAAG;IACjDU,UAAU,CAAC,MAAMH,SAAS,CAACZ,KAAK,GAAGa,MAAM,CAAC;EAC5C,CAAC,CAAC;EAEF,MAAMG,QAAQ,GAAGvC,QAAQ,CAAC,MAAM,CAACmB,KAAK,CAACC,cAAc,CAACoB,IAAI,CAAC;EAE3D,OAAO;IACLL,SAAS,EAAE9B,QAAQ,CAAC8B,SAAS,CAAC;IAC9BI,QAAQ;IACRE,WAAW,EAAEzC,QAAQ,CAAC,OAAO;MAAEe,MAAM,EAAEO,OAAO,CAACC;IAAM,CAAC,CAAC;EACzD,CAAC;AACH","names":["useToggleScope","computed","inject","onScopeDispose","provide","reactive","readonly","ref","watchEffect","getCurrentInstance","StackSymbol","Symbol","for","globalStack","useStack","isActive","zIndex","vm","parent","undefined","stack","activeChildren","Set","_zIndex","value","lastZIndex","at","_globalStack$at","push","uid","add","idx","findIndex","v","splice","delete","globalTop","_isTop","_globalStack$at2","setTimeout","localTop","size","stackStyles"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { useToggleScope } from '@/composables/toggleScope'\n\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nconst StackSymbol: InjectionKey<StackProvide> = Symbol.for('vuetify:stack')\n\ninterface StackProvide {\n  activeChildren: Set<number>\n}\n\nconst globalStack = reactive<[uid: number, zIndex: number][]>([])\n\nexport function useStack (isActive: Readonly<Ref<boolean>>, zIndex: Readonly<Ref<string | number>>) {\n  const vm = getCurrentInstance('useStack')\n\n  const parent = inject(StackSymbol, undefined)\n  const stack: StackProvide = reactive({\n    activeChildren: new Set<number>(),\n  })\n  provide(StackSymbol, stack)\n\n  const _zIndex = ref(+zIndex.value)\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value\n    globalStack.push([vm.uid, _zIndex.value])\n\n    parent?.activeChildren.add(vm.uid)\n\n    onScopeDispose(() => {\n      const idx = globalStack.findIndex(v => v[0] === vm.uid)\n      globalStack.splice(idx, 1)\n\n      parent?.activeChildren.delete(vm.uid)\n    })\n  })\n\n  const globalTop = ref(true)\n  watchEffect(() => {\n    const _isTop = globalStack.at(-1)?.[0] === vm.uid\n    setTimeout(() => globalTop.value = _isTop)\n  })\n\n  const localTop = computed(() => !stack.activeChildren.size)\n\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}