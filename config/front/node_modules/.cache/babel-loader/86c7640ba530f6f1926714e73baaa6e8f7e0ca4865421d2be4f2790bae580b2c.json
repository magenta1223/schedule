{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport setToken from \"@/utils/auth.js\";\n// import { Header, Item } from \"vue3-easy-data-table\";\n\nlet url = \"http://127.0.0.1:8000/api/song/\"; // 장고 drf 서버 주소\n\nexport default {\n  name: \"SongFixedList\",\n  data: () => {\n    return {\n      //songs\n      songs: [],\n      headers: [{\n        text: 'Artist',\n        value: 'artist'\n      }, {\n        text: 'Title',\n        value: 'title'\n      }, {\n        text: 'Vocal',\n        value: 'Vocal'\n      }, {\n        text: 'Guitar1',\n        value: 'Guitar1'\n      }, {\n        text: 'Guitar2',\n        value: 'Guitar2'\n      }, {\n        text: 'Bass',\n        value: 'Bass'\n      }, {\n        text: 'Drum',\n        value: 'Drum'\n      }, {\n        text: 'Keyboard',\n        value: 'Keyboard'\n      }, {\n        text: 'Fixed',\n        value: 'fix'\n      }],\n      delFrom: \"\",\n      // quit from song\n\n      // positions\n\n      colors: {\n        true: \"primary\",\n        false: \"error\"\n      },\n      texts: {\n        true: \"Fixed\",\n        false: \"Not Fixed\"\n      }\n    };\n  },\n  props: ['project'],\n  components: {},\n  methods: {\n    parsePlayer: function (song) {\n      song.players.map(player => {\n        if (player.fixed) {\n          //song[player.position] = player \n          song[player.player.position] = player.player.user.name;\n        }\n      });\n      return song;\n    },\n    songList: function () {\n      axios({\n        method: \"GET\",\n        url: url,\n        headers: setToken(),\n        params: {\n          user_id: localStorage.getItem('user'),\n          project_id: this.$route.query.project_id\n        }\n      }).then(response => {\n        this.songs = response.data.map((song, index) => {\n          song.index = index;\n          song = this.parsePlayer(song);\n          console.log(song);\n          return song;\n        });\n      }).catch(error => {\n        console.log(\"Failed to get song list\", error.response);\n      });\n    },\n    setIndex: function (oldSong, newSong) {\n      newSong.index = oldSong.index;\n      newSong = this.parsePlayer(newSong);\n      return newSong;\n    },\n    to: function (destination) {\n      this.$router.push({\n        name: destination,\n        query: {\n          project_id: this.$route.query.project_id\n        }\n      });\n    }\n  },\n  mounted() {\n    this.songList();\n  },\n  watch: {\n    project: {\n      handler: function (newVal, oldVal) {\n        newVal;\n        oldVal;\n        this.songList();\n      },\n      deep: true,\n      immediate: true\n    },\n    songs: {\n      handler: function (newVal, oldVal) {\n        newVal;\n        oldVal;\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","setToken","url","name","data","songs","headers","text","value","delFrom","colors","true","false","texts","props","components","methods","parsePlayer","song","players","map","player","fixed","position","user","songList","method","params","user_id","localStorage","getItem","project_id","$route","query","then","response","index","console","log","catch","error","setIndex","oldSong","newSong","to","destination","$router","push","mounted","watch","project","handler","newVal","oldVal","deep","immediate"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\Song\\SongFixedList.vue"],"sourcesContent":["<template>\r\n    <v-container>\r\n        <EasyDataTable\r\n            :headers=\"headers\"\r\n            :items=\"songs\"\r\n            table-class-name=\"customize-table\"\r\n            show-index\r\n            body-text-direction =\"center\"\r\n            header-text-direction = \"center\"\r\n            :hide-rows-per-page=\"true\"\r\n        >\r\n            <template #item-fix=\"{fix}\">\r\n                    <v-chip width=\"100%\" size=\"small\" :color=\"colors[fix]\">{{texts[fix]}}</v-chip>\r\n            </template>\r\n            <template #expand=\"item\">\r\n                <!-- 선곡모드 :: 추가 링크, 유툽, 뭐.. 줄 선 사람 리스트? 특수 세션 등 -->\r\n                <v-card class=\"elevation-0 pa-2\">\r\n                    <v-row>\r\n                        <!-- title -->\r\n                        <v-col cols=\"4\">\r\n                            <v-card-title>\r\n                                <h3>\r\n                                    {{item.title}}\r\n                                </h3>\r\n                                <h6>\r\n                                    {{item.artist}}\r\n                                </h6>\r\n                            </v-card-title>\r\n                            <v-card-text>\r\n                                <h2> 비고</h2>\r\n                            </v-card-text>\r\n                            <v-card-text class=\"text-start\">\r\n                                {{item.content}}\r\n                            </v-card-text>\r\n                        </v-col>\r\n                    </v-row>\r\n                </v-card>\r\n            </template>\r\n        </EasyDataTable>\r\n    </v-container>\r\n\r\n\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport setToken from \"@/utils/auth.js\"\r\n// import { Header, Item } from \"vue3-easy-data-table\";\r\n\r\nlet url = \"http://127.0.0.1:8000/api/song/\";  // 장고 drf 서버 주소\r\n\r\n\r\n\r\nexport default {\r\n    \r\n    name : \"SongFixedList\",\r\n\r\n    data : () => {\r\n        return {\r\n\r\n            //songs\r\n            songs : [],\r\n            headers : [\r\n                    {text : 'Artist', value : 'artist'},\r\n                    {text : 'Title', value : 'title'},\r\n                    {text : 'Vocal', value : 'Vocal'},\r\n                    {text : 'Guitar1', value : 'Guitar1'},\r\n                    {text : 'Guitar2', value : 'Guitar2'},\r\n                    {text : 'Bass', value : 'Bass'},\r\n                    {text : 'Drum', value : 'Drum'},\r\n                    {text : 'Keyboard', value : 'Keyboard'},\r\n                    {text : 'Fixed', value : 'fix'},\r\n],\r\n            delFrom : \"\", // quit from song\r\n            \r\n            // positions\r\n\r\n\r\n            colors : {\r\n                true : \"primary\",\r\n                false : \"error\"\r\n            },\r\n            texts : {\r\n                true : \"Fixed\",\r\n                false : \"Not Fixed\"\r\n            }\r\n\r\n      \r\n        }\r\n    },\r\n\r\n    props : ['project'],\r\n\r\n    components : {\r\n    },\r\n    \r\n    methods: {\r\n        parsePlayer : function(song){\r\n            song.players.map((player) => {\r\n\r\n                if (player.fixed){\r\n                    //song[player.position] = player \r\n                    song[player.player.position] = player.player.user.name \r\n                }\r\n            })\r\n            return song\r\n        },\r\n        \r\n        songList : function(){\r\n            axios({\r\n                method : \"GET\",\r\n                url : url,\r\n                headers : setToken(),\r\n                params : {\r\n                    user_id : localStorage.getItem('user'),\r\n                    project_id : this.$route.query.project_id\r\n                }\r\n            }).then((response) => {\r\n                this.songs = response.data.map( (song, index) => {\r\n                    song.index = index\r\n                    song = this.parsePlayer(song)\r\n                    console.log(song)\r\n                    return song\r\n                })\r\n\r\n            }).catch((error) => {\r\n                console.log(\"Failed to get song list\", error.response);\r\n            });\r\n        },\r\n\r\n        setIndex : function(oldSong, newSong){\r\n            newSong.index = oldSong.index\r\n            newSong = this.parsePlayer(newSong)\r\n            return newSong\r\n        }, \r\n\r\n        to : function(destination){\r\n            this.$router.push({\r\n                name : destination,\r\n                query : {\r\n                    project_id : this.$route.query.project_id\r\n                }})\r\n        },\r\n\r\n    },\r\n\r\n    mounted() {\r\n        this.songList()\r\n    },\r\n\r\n    watch : {\r\n        project : {\r\n            handler: function(newVal, oldVal){\r\n                newVal;oldVal;\r\n                this.songList()\r\n            },\r\n            deep : true,\r\n            immediate : true,\r\n        },\r\n\r\n        songs : {\r\n            handler: function(newVal, oldVal){\r\n                newVal; oldVal\r\n            },\r\n            deep : true,\r\n            immediate : true\r\n        },\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.dialog{\r\n    margin-left: auto!important; margin-right: auto!important; \r\n}\r\n\r\n.customize-table{\r\n    --easy-table-body-item-padding : 0px, 0px;\r\n}\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}