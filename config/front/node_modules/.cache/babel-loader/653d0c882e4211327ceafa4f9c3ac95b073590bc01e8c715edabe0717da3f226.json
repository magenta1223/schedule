{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"ManageStatus\",\n  data: () => {\n    return {\n      // route : useRoute(),\n      // router : useRouter(),\n      project_id: -1,\n      status: \"P\",\n      statusOptions: [{\n        name: \"Prepare\",\n        value: \"P\",\n        color: \"orange\"\n      }, {\n        name: \"Ready\",\n        value: \"R\",\n        color: \"success\"\n      }, {\n        name: \"OnGoing\",\n        value: \"O\",\n        color: \"primary\"\n      }, {\n        name: \"Done\",\n        value: \"D\",\n        color: \"error\"\n      }]\n    };\n  },\n  methods: {\n    updateStatus: function () {\n      axios({\n        method: \"PATCH\",\n        url: url + this.$route.query.project_id + '/',\n        headers: setToken(),\n        params: {\n          user_id: localStorage.getItem('user')\n        }\n      }).then(response => {\n        this.project = response.data;\n        this.songs = this.project.songs.map((song, index) => {\n          song.index = index;\n          song = this.parsePlayer(song);\n          this.selectedSongs.push(song.fix);\n          return song;\n        });\n        this.status = this.project.status;\n        if (parseInt(localStorage.getItem('user')) === this.project.leader) {\n          console.log(\"ture\");\n          this.manage_mode = true;\n        }\n      }).catch(error => {\n        console.log(\"Failed to get retreival\", error.response);\n      });\n    }\n  },\n  mounted() {\n    this.status = this.$route.query.status;\n    this.project_id = this.$route.query.project_id;\n  },\n  watch: {\n    status: function () {\n      this.updateStatus();\n    }\n  }\n};","map":{"version":3,"mappings":";AA0BA,eAAe;EACXA,IAAG,EAAI,cAAa;EAGpBC,IAAG,EAAI,MAAM;IACT,OAAO;MACC;MACA;MACAC,UAAS,EAAI,CAAC,CAAC;MACfC,MAAK,EAAI,GAAG;MACZC,aAAY,EAAI,CACZ;QACIJ,IAAG,EAAI,SAAS;QAChBK,KAAI,EAAI,GAAG;QACXC,KAAI,EAAI;MACZ,CAAC,EACD;QACIN,IAAG,EAAI,OAAO;QACdK,KAAI,EAAI,GAAG;QACXC,KAAI,EAAI;MACZ,CAAC,EACD;QACIN,IAAG,EAAI,SAAS;QAChBK,KAAI,EAAI,GAAG;QACXC,KAAI,EAAI;MACZ,CAAC,EACD;QACIN,IAAG,EAAI,MAAM;QACbK,KAAI,EAAI,GAAG;QACXC,KAAI,EAAI;MACZ,CAAC;IAEb;EACJ,CAAC;EAGDC,OAAM,EAAI;IACNC,YAAW,EAAI,YAAU;MACpBC,KAAK,CAAC;QACHC,MAAK,EAAI,OAAO;QAChBC,GAAE,EAAIA,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACX,UAAS,GAAI,GAAG;QAC9CY,OAAM,EAAIC,QAAQ,EAAE;QACpBC,MAAK,EAAI;UACLC,OAAM,EAAIC,YAAY,CAACC,OAAO,CAAC,MAAM;QACzC;MACJ,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACC,OAAM,GAAID,QAAQ,CAACpB,IAAG;QAC3B,IAAI,CAACsB,KAAI,GAAI,IAAI,CAACD,OAAO,CAACC,KAAK,CAACC,GAAG,CAAE,CAACC,IAAI,EAAEC,KAAK,KAAK;UAClDD,IAAI,CAACC,KAAI,GAAIA,KAAI;UACjBD,IAAG,GAAI,IAAI,CAACE,WAAW,CAACF,IAAI;UAC5B,IAAI,CAACG,aAAa,CAACC,IAAI,CAACJ,IAAI,CAACK,GAAG;UAChC,OAAOL,IAAG;QACd,CAAC;QAED,IAAI,CAACtB,MAAK,GAAI,IAAI,CAACmB,OAAO,CAACnB,MAAK;QAEhC,IAAI4B,QAAQ,CAACb,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,CAACG,OAAO,CAACU,MAAM,EAAC;UAC/DC,OAAO,CAACC,GAAG,CAAC,MAAM;UAClB,IAAI,CAACC,WAAU,GAAI,IAAG;QAC1B;MAEJ,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QAChBJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,KAAK,CAAChB,QAAQ,CAAC;MAC1D,CAAC,CAAC;IAEN;EACJ,CAAC;EAEDiB,OAAO,GAAG;IACN,IAAI,CAACnC,MAAK,GAAI,IAAI,CAACS,MAAM,CAACC,KAAK,CAACV,MAAK;IACrC,IAAI,CAACD,UAAS,GAAI,IAAI,CAACU,MAAM,CAACC,KAAK,CAACX,UAAS;EACjD,CAAC;EAGDqC,KAAI,EAAI;IACJpC,MAAK,EAAI,YAAU;MACf,IAAI,CAACK,YAAY,EAAC;IACtB;EACJ;AAUJ","names":["name","data","project_id","status","statusOptions","value","color","methods","updateStatus","axios","method","url","$route","query","headers","setToken","params","user_id","localStorage","getItem","then","response","project","songs","map","song","index","parsePlayer","selectedSongs","push","fix","parseInt","leader","console","log","manage_mode","catch","error","mounted","watch"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\Project\\Manage\\ManageStatus.vue"],"sourcesContent":["<template>\r\n    <v-container>\r\n        <!-- <v-radio-group v-model=\"status\" inline @change=\"save\"> -->\r\n        <v-radio-group v-model=\"status\" inline>\r\n            <template v-slot:label>\r\n                <strong> Status of Project </strong>\r\n            </template>\r\n            <v-radio\r\n                v-for=\"option in statusOptions\"\r\n                :key=\"option.value\"\r\n                :value=\"option.value\"\r\n                :color=\"option.color\"\r\n            >\r\n                <template v-slot:label>\r\n                    <strong >{{option.name}} </strong>\r\n                </template>\r\n            </v-radio>\r\n        </v-radio-group>\r\n    </v-container>\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\n\r\nexport default {\r\n    name : \"ManageStatus\" , \r\n\r\n\r\n    data : () => {\r\n        return {\r\n                // route : useRoute(),\r\n                // router : useRouter(),\r\n                project_id : -1,\r\n                status : \"P\",\r\n                statusOptions : [\r\n                    {\r\n                        name : \"Prepare\",\r\n                        value : \"P\",\r\n                        color : \"orange\"\r\n                    },\r\n                    {\r\n                        name : \"Ready\",\r\n                        value : \"R\",\r\n                        color : \"success\"\r\n                    },\r\n                    {\r\n                        name : \"OnGoing\",\r\n                        value : \"O\",\r\n                        color : \"primary\"\r\n                    },\r\n                    {\r\n                        name : \"Done\",\r\n                        value : \"D\",\r\n                        color : \"error\"\r\n                    },                \r\n                ]\r\n        }\r\n    },\r\n\r\n\r\n    methods : {\r\n        updateStatus : function(){\r\n             axios({\r\n                method : \"PATCH\",\r\n                url : url + this.$route.query.project_id + '/',\r\n                headers : setToken(),\r\n                params : {\r\n                    user_id : localStorage.getItem('user'),\r\n                }\r\n            }).then((response) => {\r\n                this.project = response.data\r\n                this.songs = this.project.songs.map( (song, index) => {\r\n                    song.index = index\r\n                    song = this.parsePlayer(song)\r\n                    this.selectedSongs.push(song.fix)\r\n                    return song\r\n                })\r\n\r\n                this.status = this.project.status\r\n\r\n                if (parseInt(localStorage.getItem('user')) === this.project.leader){\r\n                    console.log(\"ture\")\r\n                    this.manage_mode = true\r\n                }\r\n\r\n            }).catch((error) => {\r\n                console.log(\"Failed to get retreival\", error.response);\r\n            });\r\n            \r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.status = this.$route.query.status\r\n        this.project_id = this.$route.query.project_id\r\n    },\r\n\r\n\r\n    watch : {\r\n        status : function(){\r\n            this.updateStatus()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}