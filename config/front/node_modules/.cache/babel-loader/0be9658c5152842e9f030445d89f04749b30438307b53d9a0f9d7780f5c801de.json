{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport 'tui-calendar/dist/tui-calendar.css';\nimport { Calendar } from '@toast-ui/vue-calendar';\n\n// If you use the default popups, use this.\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\n// import themeConfig from './myTheme.js'\n\nimport axios from \"axios\";\nimport setToken from \"../../utils/auth.js\";\nimport { createPopper } from '@popperjs/core';\n\n// import AddEventModal from './AddEvent.vue'\n// import ToolTip from './ToolTip.vue'\n\nlet url = \"http://127.0.0.1:8000/api/wrapper/\";\nexport default {\n  name: 'calendar',\n  data: () => {\n    return {\n      // calendar configurations\n      // themeConfig : themeConfig,\n      events: [],\n      calendarList: [],\n      scheduleList: [],\n      selectedView: {\n        text: 'Monthly',\n        value: 'month'\n      },\n      viewModeOptions: [{\n        text: 'Monthly',\n        value: 'month'\n      }, {\n        text: 'Weekly',\n        value: 'week'\n      }, {\n        text: 'Daily',\n        value: 'day'\n      }],\n      // event modal\n      dialog: false,\n      // control modal on/off\n      default_date: \"\",\n      schedule: \"\",\n      // schedule detail modal\n      now_event: {\n        schedule: {\n          id: -1,\n          calendarId: -1,\n          //String(event.group), // undefined\n          title: 'dummy',\n          category: 'allday',\n          dueDateClass: '',\n          start: 'Tue Jun 07 1970 00:00:00 GMT+0900',\n          end: 'Tue Jun 07 1970 00:00:00 GMT+0900',\n          body: 'dummy',\n          isPrivate: false,\n          attendees: ['dummy'],\n          raw: {\n            author: 'dummy',\n            wrapper_id: '-1',\n            index: -1\n          }\n        }\n      },\n      open: false,\n      modalOpen: false\n    };\n  },\n  methods: {\n    // parse util functions\n    // setDate : function(){\n    //     return (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)\n    // },\n\n    // parseEvent : function(data, index){\n\n    //     let event = data.event\n    //     console.log(data)\n    //     let attendees = event.relatedPeople\n\n    //     return {\n    //             id: event.id,\n    //             calendarId: String(event.group.id),//String(event.group), // undefined\n    //             title: event.title,\n    //             category: 'allday',\n    //             dueDateClass: '',\n    //             start: event.start,\n    //             end: event.end,\n    //             body : event.description,\n    //             isPrivate : event.group.is_private,\n    //             attendees : attendees,\n    //             raw : {\n    //                 author : String(event.author),\n    //                 wrapper_id : data.id,\n    //                 index : index\n    //             }\n    //         }\n\n    // },\n\n    // parseGroup : function(eventgroup) {\n    //     eventgroup.id = String(eventgroup.id)\n    //     eventgroup.bgColor = eventgroup.color\n    //     eventgroup.borderColor = eventgroup.color\n    //     delete eventgroup.color   \n\n    //     return eventgroup\n    // },\n\n    // // to prev / next month\n    // to : function(direction) {  \n    //     this.$refs.tuiCalendar.invoke(direction); // ~invoke : tui calendar의 method를 call하기 위한 방법임. \n    // },\n    // // http://forward.nhnent.com/hands-on-labs/toastui.calendar-timetable/05%20events.html#id2\n\n    // // off addEventModal\n    // offModal : function(dialog) {\n    //     this.dialog = false\n    //     this.schedule = \"\"\n    // },\n\n    // // events CRUD\n    // deleteEvent : function(index){\n    //     this.scheduleList.splice(index, 1)\n    // },\n\n    // addNewEvent : function(newEvent){\n    //     if (newEvent.index !== -1){\n    //         this.deleteEvent(newEvent.index)\n    //     }\n\n    //     this.scheduleList.push( this.parseEvent(newEvent.data) )\n    // },\n\n    // addNewGroup : function(newGroup){\n    //     this.calendarList.push( this.parseGroup(newGroup) )\n    // },\n\n    // updateEvent : function(schedule){\n    //     this.schedule = schedule\n    //     this.dialog = true\n    // },\n\n    // // tui calendar methods for detailed control\n    // onAfterRenderSchedule(e) {\n    //     // 캘린더 전체를 렌더링한 이후 매 싱글 스케쥴에 적용됨\n    //     let schedule = e.schedule;\n    //     // use the element\n    // },\n    // onBeforeCreateSchedule(e) {\n    //     // calendar cell 클릭하면 발생\n    //     this.default_date = e.start._date.toISOString().substr(0, 10)\n\n    //     this.dialog = true\n    //     // let the creation guide invisible\n    //     let guide = e.guide;\n    //     guide.clearGuideElement();\n\n    //     // 여기서 열지말고, 새 이벤트 작성을 위쪽 버튼에 놓자\n    //     // 여기는 누르면 주간스케쥴로 이동\n\n    // },\n\n    // AddPrivateSchdule : function(){\n    //     // axios로 private schedule 추가\n    //     // 잘 추가 됐으면 해당 schedule을 schedules에 푸시\n    // },\n\n    // onBeforeDeleteSchedule(e) {\n    //     // 스케쥴 삭제 시 이 이벤트\n    //     console.log('schedule delete')\n\n    // },\n    // onBeforeUpdateSchedule(e) {\n    //     // view type을 바꾸기 위해 스케쥴을 드래그 할 때 발생 > drag은 끌거임\n    //     console.log('update')\n\n    // },\n    // onClickDayname(e) {\n    //     // weekly view에서 day name을 클릭했을 때 \n    //     console.log('day name click')\n\n    // },\n    // onClickSchedule(e) {\n    //     // schedule을 클릭했을 때 발생\n    //     // 툴팁 팝업 띄우고\n    //     // private이면 삭제 / 수정 가능하게\n\n    //     // 누르면 x, y 좌표 받고\n    //     // 열어 새끼야\n    //     // 좌표 말고 e.schedule이 바뀔 때 여는거 아님?\n\n    //     //this.openTooltip = true\n    //     //console.log(this.openTooltip)\n    //     //this.tooltip_x = e.event.pageX\n    //     //this.tooltip_y = e.event.pageY\n    //     this.now_event = e\n    //     this.modalOpen = true\n\n    //     // 여기서 popper를 씁시당\n    //     createPopper(e.event.srcElement, this.$refs.ToolTip.$el, {\n    //         placement : \"bottom\",\n    //         modifiers : [\n    //             {\n    //                 name : \"offset\",\n    //                 options : {\n    //                     offset : [0, 10]\n    //                 }\n    //             }\n    //         ]\n    //     })\n\n    // },\n    // onClickTimezonesCollapseBtn(e) {\n    //     // tz collapse 버튼을 눌렀을 때\n    //     console.log('tz collapse') \n\n    // },\n  },\n  components: {\n    Calendar,\n    AddEventModal,\n    ToolTip\n  },\n  mounted() {\n    axios({\n      method: \"GET\",\n      url: url,\n      headers: setToken(),\n      params: {\n        content_type: \"event\",\n        view_type: \"calendar\",\n        user_id: localStorage.getItem('user')\n      }\n    }).then(response => {\n      console.log('response', response);\n      let data = response.data.data;\n      let eventgroups = response.data.eventgroups;\n      for (let i in data) {\n        this.scheduleList.push(this.parseEvent(data[i], i));\n      }\n      for (let i in eventgroups) {\n        this.calendarList.push(this.parseGroup(eventgroups[i]));\n      }\n    }).catch(response => {\n      console.log(\"Failed\", response);\n    });\n  },\n  computed: {\n    privateCalendars: function () {\n      let arr = Array();\n      for (let i in this.calendarList) {\n        if (this.calendarList[i].is_private === true) {\n          arr.push(this.calendarList[i]);\n        }\n      }\n      return arr;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Calendar","axios","setToken","createPopper","url","name","data","events","calendarList","scheduleList","selectedView","text","value","viewModeOptions","dialog","default_date","schedule","now_event","id","calendarId","title","category","dueDateClass","start","end","body","isPrivate","attendees","raw","author","wrapper_id","index","open","modalOpen","methods","components","AddEventModal","ToolTip","mounted","method","headers","params","content_type","view_type","user_id","localStorage","getItem","then","response","console","log","eventgroups","i","push","parseEvent","parseGroup","catch","computed","privateCalendars","arr","Array","is_private"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\Event\\Calendar.vue"],"sourcesContent":["<template>\r\n<v-container>\r\n    <!-- filter / controller -->\r\n    <v-row align-center class=\"filter\">\r\n        <v-col cols=\"4\">\r\n            <v-select\r\n            item-text=\"text\"\r\n            itme-value=\"value\"\r\n            :items=\"viewModeOptions\"\r\n            v-model=\"selectedView.value\"\r\n            label=\"View Type\"\r\n            outlined\r\n            ></v-select>\r\n        </v-col>\r\n\r\n        <v-col>\r\n                <!-- <v-btn type=\"button\" class=\"btn elevation-0\" @click=\"to('today')\">0</v-btn> -->\r\n                <v-btn type=\"button\" class=\"btn elevation-0\" @click=\"to('prev')\"> </v-btn>\r\n                <v-btn type=\"button\" class=\"btn elevation-0\" @click=\"to('next')\">></v-btn>\r\n        </v-col>\r\n    </v-row>\r\n    <!-- Calendar -->\r\n    <v-row>\r\n        <v-col cols=\"12\">\r\n    \r\n            <Calendar\r\n            ref=\"tuiCalendar\"\r\n            :view=\"selectedView.value\"\r\n            :calendars=\"calendarList\"\r\n            :schedules=\"scheduleList\"\r\n            :theme=\"themeConfig\"\r\n            :useCreationPopup=\"false\"\r\n            :useDetailPopup=\"false\"\r\n\r\n            @afterRenderSchedule=\"onAfterRenderSchedule\"\r\n            @beforeCreateSchedule=\"onBeforeCreateSchedule\"\r\n            @beforeDeleteSchedule=\"onBeforeDeleteSchedule\"\r\n            @beforeUpdateSchedule=\"onBeforeUpdateSchedule\"\r\n            @clickDayname=\"onClickDayname\"\r\n            @clickSchedule=\"onClickSchedule\"\r\n            @clickTimezonesCollapseBtn=\"onClickTimezonesCollapseBtn\"\r\n            />\r\n        </v-col>\r\n    </v-row>\r\n\r\n    <!-- slot을 이용해 내용을 정의하는 방법 https://goddino.tistory.com/93 -->\r\n    <!-- 일단은 그냥 모든 이벤트를 넘겨주고 나중에는 따로 빼서.. -->\r\n    <AddEventModal\r\n        :calendarGroups=\"privateCalendars\"\r\n        :events=\"scheduleList\" \r\n        :dialog=\"dialog\"\r\n        :default_date=\"default_date\"\r\n        :schedule=\"schedule\"\r\n        @offModal=\"offModal\"\r\n        @newEvent=\"addNewEvent\"\r\n        @newGroup=\"addNewGroup\"/>\r\n    \r\n    <ToolTip\r\n    ref = \"ToolTip\"\r\n    v-show=\"modalOpen\"\r\n    :event=\"now_event\"\r\n    @updateEvent=\"updateEvent\"\r\n    @deleteEvent=\"deleteEvent\"/>\r\n\r\n\r\n\r\n    \r\n    </v-container>\r\n</template>\r\n<script>\r\nimport 'tui-calendar/dist/tui-calendar.css'\r\nimport { Calendar } from '@toast-ui/vue-calendar';\r\n\r\n// If you use the default popups, use this.\r\nimport 'tui-date-picker/dist/tui-date-picker.css';\r\nimport 'tui-time-picker/dist/tui-time-picker.css';\r\n// import themeConfig from './myTheme.js'\r\n\r\nimport axios from \"axios\";\r\nimport setToken from \"../../utils/auth.js\"\r\nimport { createPopper } from '@popperjs/core';\r\n\r\n// import AddEventModal from './AddEvent.vue'\r\n// import ToolTip from './ToolTip.vue'\r\n\r\nlet url = \"http://127.0.0.1:8000/api/wrapper/\";\r\n\r\nexport default {\r\n    name : 'calendar', \r\n    \r\n    data : () => {\r\n\r\n        \r\n      return {\r\n            // calendar configurations\r\n            // themeConfig : themeConfig,\r\n            events : [],\r\n            calendarList: [],\r\n            scheduleList: [],\r\n\r\n            selectedView: {\r\n                    text : 'Monthly',\r\n                    value : 'month'\r\n            },\r\n            viewModeOptions: [\r\n                { text : 'Monthly', value : 'month' },\r\n                { text : 'Weekly', value : 'week' },\r\n                {text : 'Daily', value : 'day' }\r\n            ],\r\n\r\n            // event modal\r\n            dialog: false, // control modal on/off\r\n            default_date : \"\",\r\n            schedule : \"\",\r\n\r\n            // schedule detail modal\r\n            now_event : {\r\n                    schedule : {id: -1,\r\n                        calendarId: -1,//String(event.group), // undefined\r\n                        title: 'dummy',\r\n                        category: 'allday',\r\n                        dueDateClass: '',\r\n                        start: 'Tue Jun 07 1970 00:00:00 GMT+0900',\r\n                        end: 'Tue Jun 07 1970 00:00:00 GMT+0900',\r\n                        body : 'dummy',\r\n                        isPrivate : false,\r\n                        attendees : ['dummy'],\r\n                        raw : {\r\n                            author : 'dummy',\r\n                            wrapper_id : '-1',\r\n                            index : -1\r\n                        }\r\n                    }\r\n                },\r\n            open : false,\r\n            modalOpen : false\r\n            }  \r\n    },\r\n\r\n    methods : {\r\n        // parse util functions\r\n        // setDate : function(){\r\n        //     return (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)\r\n        // },\r\n\r\n        // parseEvent : function(data, index){\r\n\r\n        //     let event = data.event\r\n        //     console.log(data)\r\n        //     let attendees = event.relatedPeople\r\n\r\n        //     return {\r\n        //             id: event.id,\r\n        //             calendarId: String(event.group.id),//String(event.group), // undefined\r\n        //             title: event.title,\r\n        //             category: 'allday',\r\n        //             dueDateClass: '',\r\n        //             start: event.start,\r\n        //             end: event.end,\r\n        //             body : event.description,\r\n        //             isPrivate : event.group.is_private,\r\n        //             attendees : attendees,\r\n        //             raw : {\r\n        //                 author : String(event.author),\r\n        //                 wrapper_id : data.id,\r\n        //                 index : index\r\n        //             }\r\n        //         }\r\n\r\n        // },\r\n\r\n        // parseGroup : function(eventgroup) {\r\n        //     eventgroup.id = String(eventgroup.id)\r\n        //     eventgroup.bgColor = eventgroup.color\r\n        //     eventgroup.borderColor = eventgroup.color\r\n        //     delete eventgroup.color   \r\n\r\n        //     return eventgroup\r\n        // },\r\n        \r\n        // // to prev / next month\r\n        // to : function(direction) {  \r\n        //     this.$refs.tuiCalendar.invoke(direction); // ~invoke : tui calendar의 method를 call하기 위한 방법임. \r\n        // },\r\n        // // http://forward.nhnent.com/hands-on-labs/toastui.calendar-timetable/05%20events.html#id2\r\n        \r\n        // // off addEventModal\r\n        // offModal : function(dialog) {\r\n        //     this.dialog = false\r\n        //     this.schedule = \"\"\r\n        // },\r\n        \r\n        // // events CRUD\r\n        // deleteEvent : function(index){\r\n        //     this.scheduleList.splice(index, 1)\r\n        // },\r\n\r\n        // addNewEvent : function(newEvent){\r\n        //     if (newEvent.index !== -1){\r\n        //         this.deleteEvent(newEvent.index)\r\n        //     }\r\n\r\n        //     this.scheduleList.push( this.parseEvent(newEvent.data) )\r\n        // },\r\n\r\n        // addNewGroup : function(newGroup){\r\n        //     this.calendarList.push( this.parseGroup(newGroup) )\r\n        // },\r\n\r\n        // updateEvent : function(schedule){\r\n        //     this.schedule = schedule\r\n        //     this.dialog = true\r\n        // },\r\n\r\n        // // tui calendar methods for detailed control\r\n        // onAfterRenderSchedule(e) {\r\n        //     // 캘린더 전체를 렌더링한 이후 매 싱글 스케쥴에 적용됨\r\n        //     let schedule = e.schedule;\r\n        //     // use the element\r\n        // },\r\n        // onBeforeCreateSchedule(e) {\r\n        //     // calendar cell 클릭하면 발생\r\n        //     this.default_date = e.start._date.toISOString().substr(0, 10)\r\n            \r\n        //     this.dialog = true\r\n        //     // let the creation guide invisible\r\n        //     let guide = e.guide;\r\n        //     guide.clearGuideElement();\r\n\r\n        //     // 여기서 열지말고, 새 이벤트 작성을 위쪽 버튼에 놓자\r\n        //     // 여기는 누르면 주간스케쥴로 이동\r\n\r\n            \r\n        // },\r\n        \r\n        // AddPrivateSchdule : function(){\r\n        //     // axios로 private schedule 추가\r\n        //     // 잘 추가 됐으면 해당 schedule을 schedules에 푸시\r\n        // },\r\n\r\n\r\n        // onBeforeDeleteSchedule(e) {\r\n        //     // 스케쥴 삭제 시 이 이벤트\r\n        //     console.log('schedule delete')\r\n            \r\n        // },\r\n        // onBeforeUpdateSchedule(e) {\r\n        //     // view type을 바꾸기 위해 스케쥴을 드래그 할 때 발생 > drag은 끌거임\r\n        //     console.log('update')\r\n            \r\n        // },\r\n        // onClickDayname(e) {\r\n        //     // weekly view에서 day name을 클릭했을 때 \r\n        //     console.log('day name click')\r\n            \r\n        // },\r\n        // onClickSchedule(e) {\r\n        //     // schedule을 클릭했을 때 발생\r\n        //     // 툴팁 팝업 띄우고\r\n        //     // private이면 삭제 / 수정 가능하게\r\n            \r\n\r\n        //     // 누르면 x, y 좌표 받고\r\n        //     // 열어 새끼야\r\n        //     // 좌표 말고 e.schedule이 바뀔 때 여는거 아님?\r\n            \r\n        //     //this.openTooltip = true\r\n        //     //console.log(this.openTooltip)\r\n        //     //this.tooltip_x = e.event.pageX\r\n        //     //this.tooltip_y = e.event.pageY\r\n        //     this.now_event = e\r\n        //     this.modalOpen = true\r\n\r\n        //     // 여기서 popper를 씁시당\r\n        //     createPopper(e.event.srcElement, this.$refs.ToolTip.$el, {\r\n        //         placement : \"bottom\",\r\n        //         modifiers : [\r\n        //             {\r\n        //                 name : \"offset\",\r\n        //                 options : {\r\n        //                     offset : [0, 10]\r\n        //                 }\r\n        //             }\r\n        //         ]\r\n        //     })\r\n            \r\n        // },\r\n        // onClickTimezonesCollapseBtn(e) {\r\n        //     // tz collapse 버튼을 눌렀을 때\r\n        //     console.log('tz collapse') \r\n\r\n\r\n        // },\r\n        },\r\n\r\n\r\n    components: {\r\n        Calendar,\r\n        AddEventModal,\r\n        ToolTip\r\n    },\r\n\r\n    mounted() {\r\n\r\n        axios({\r\n            method : \"GET\",\r\n            url : url,\r\n            headers : setToken(),\r\n            params : {\r\n                content_type : \"event\",\r\n                view_type : \"calendar\",\r\n                user_id : localStorage.getItem('user')\r\n            }\r\n        })\r\n        .then((response) => {\r\n            console.log('response', response)\r\n            let data = response.data.data\r\n            let eventgroups = response.data.eventgroups\r\n\r\n            for (let i in data){\r\n                this.scheduleList.push(this.parseEvent(data[i], i))\r\n            }\r\n\r\n            for (let i in eventgroups){\r\n                this.calendarList.push(this.parseGroup(eventgroups[i]))\r\n            }\r\n        })\r\n        .catch(response => {\r\n            console.log(\"Failed\", response);\r\n        });\r\n\r\n    },\r\n\r\n    computed: {\r\n        privateCalendars : function(){\r\n            let arr = Array()\r\n            for (let i in this.calendarList){\r\n                if (this.calendarList[i].is_private === true){\r\n                    arr.push(this.calendarList[i])\r\n                }\r\n            }\r\n\r\n            return arr\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .btn{\r\n        padding-top:5px;\r\n        padding-bottom:5px;\r\n        padding-left: 15px;\r\n        padding-right: 15px;\r\n        margin: 5px;\r\n        border-radius: 30px;\r\n        background-color: #ffffff!important;\r\n        border-color: #DCDCDC!important;\r\n        border:solid 1px;\r\n    }\r\n\r\n    .filter{\r\n        margin-bottom:-50px;\r\n    }\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}