{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, vShow as _vShow, Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VOverlay.css\";\n\n// Composables\nimport { makeActivatorProps, useActivator } from \"./useActivator.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\";\nimport { makeLocationStrategyProps, useLocationStrategies } from \"./locationStrategies.mjs\";\nimport { makeScrollStrategyProps, useScrollStrategies } from \"./scrollStrategies.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useBackButton, useRouter } from \"../../composables/router.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useHydration } from \"../../composables/hydration.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { useStack } from \"../../composables/stack.mjs\";\nimport { useTeleport } from \"../../composables/teleport.mjs\";\nimport { useToggleScope } from \"../../composables/toggleScope.mjs\"; // Directives\nimport { ClickOutside } from \"../../directives/click-outside/index.mjs\"; // Utilities\nimport { animate, convertToUnit, genericComponent, getScrollParent, IN_BROWSER, pick, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\";\nimport { computed, mergeProps, ref, Teleport, toHandlers, toRef, Transition, watch } from 'vue';\n\n// Types\n\nfunction Scrim(props) {\n  const {\n    modelValue,\n    color,\n    ...rest\n  } = props;\n  return _createVNode(Transition, {\n    \"name\": \"fade-transition\",\n    \"appear\": true\n  }, {\n    default: () => [props.modelValue && _createVNode(\"div\", _mergeProps({\n      \"class\": ['v-overlay__scrim', props.color.backgroundColorClasses.value],\n      \"style\": props.color.backgroundColorStyles.value\n    }, rest), null)]\n  });\n}\nexport const makeVOverlayProps = propsFactory({\n  absolute: Boolean,\n  attach: [Boolean, String, Object],\n  closeOnBack: {\n    type: Boolean,\n    default: true\n  },\n  contained: Boolean,\n  contentClass: null,\n  contentProps: null,\n  disabled: Boolean,\n  noClickAnimation: Boolean,\n  modelValue: Boolean,\n  persistent: Boolean,\n  scrim: {\n    type: [String, Boolean],\n    default: true\n  },\n  zIndex: {\n    type: [Number, String],\n    default: 2000\n  },\n  ...makeActivatorProps(),\n  ...makeDimensionProps(),\n  ...makeLazyProps(),\n  ...makeLocationStrategyProps(),\n  ...makeScrollStrategyProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps()\n}, 'v-overlay');\nexport const VOverlay = genericComponent()({\n  name: 'VOverlay',\n  directives: {\n    ClickOutside\n  },\n  inheritAttrs: false,\n  props: makeVOverlayProps(),\n  emits: {\n    'click:outside': e => true,\n    'update:modelValue': value => true,\n    afterLeave: () => true\n  },\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs,\n      emit\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const isActive = computed({\n      get: () => model.value,\n      set: v => {\n        if (!(v && props.disabled)) model.value = v;\n      }\n    });\n    const {\n      teleportTarget\n    } = useTeleport(computed(() => props.attach || props.contained));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      rtlClasses,\n      isRtl\n    } = useRtl();\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, isActive);\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null;\n    }));\n    const {\n      globalTop,\n      localTop,\n      stackStyles\n    } = useStack(isActive, toRef(props, 'zIndex'));\n    const {\n      activatorEl,\n      activatorRef,\n      activatorEvents,\n      contentEvents,\n      scrimEvents\n    } = useActivator(props, {\n      isActive,\n      isTop: localTop\n    });\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const isMounted = useHydration();\n    watch(() => props.disabled, v => {\n      if (v) isActive.value = false;\n    });\n    const root = ref();\n    const contentEl = ref();\n    const {\n      contentStyles,\n      updateLocation\n    } = useLocationStrategies(props, {\n      isRtl,\n      contentEl,\n      activatorEl,\n      isActive\n    });\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation\n    });\n    function onClickOutside(e) {\n      emit('click:outside', e);\n      if (!props.persistent) isActive.value = false;else animateClick();\n    }\n    function closeConditional() {\n      return isActive.value && globalTop.value;\n    }\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown);\n      } else {\n        window.removeEventListener('keydown', onKeydown);\n      }\n    }, {\n      immediate: true\n    });\n    function onKeydown(e) {\n      if (e.key === 'Escape' && globalTop.value) {\n        if (!props.persistent) {\n          isActive.value = false;\n        } else animateClick();\n      }\n    }\n    const router = useRouter();\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (globalTop.value && isActive.value) {\n          next(false);\n          if (!props.persistent) isActive.value = false;else animateClick();\n        } else {\n          next();\n        }\n      });\n    });\n    const top = ref();\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value);\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop;\n        }\n      }\n    });\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick() {\n      if (props.noClickAnimation) return;\n      contentEl.value && animate(contentEl.value, [{\n        transformOrigin: 'center'\n      }, {\n        transform: 'scale(1.03)'\n      }, {\n        transformOrigin: 'center'\n      }], {\n        duration: 150,\n        easing: standardEasing\n      });\n    }\n    useRender(() => {\n      var _slots$activator, _slots$default;\n      return _createVNode(_Fragment, null, [(_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {\n        isActive: isActive.value,\n        props: mergeProps({\n          ref: activatorRef\n        }, toHandlers(activatorEvents.value), props.activatorProps)\n      }), isMounted.value && _createVNode(Teleport, {\n        \"disabled\": !teleportTarget.value,\n        \"to\": teleportTarget.value\n      }, {\n        default: () => [hasContent.value && _createVNode(\"div\", _mergeProps({\n          \"class\": ['v-overlay', {\n            'v-overlay--absolute': props.absolute || props.contained,\n            'v-overlay--active': isActive.value,\n            'v-overlay--contained': props.contained\n          }, themeClasses.value, rtlClasses.value],\n          \"style\": [stackStyles.value, {\n            top: convertToUnit(top.value)\n          }],\n          \"ref\": root\n        }, attrs), [_createVNode(Scrim, _mergeProps({\n          \"color\": scrimColor,\n          \"modelValue\": isActive.value && !!props.scrim\n        }, toHandlers(scrimEvents.value)), null), _createVNode(MaybeTransition, {\n          \"appear\": true,\n          \"persisted\": true,\n          \"transition\": props.transition,\n          \"target\": activatorEl.value,\n          \"onAfterLeave\": () => {\n            onAfterLeave();\n            emit('afterLeave');\n          }\n        }, {\n          default: () => [_withDirectives(_createVNode(\"div\", _mergeProps({\n            \"ref\": contentEl,\n            \"class\": ['v-overlay__content', props.contentClass],\n            \"style\": [dimensionStyles.value, contentStyles.value]\n          }, toHandlers(contentEvents.value), props.contentProps), [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n            isActive\n          })]), [[_vShow, isActive.value], [_resolveDirective(\"click-outside\"), {\n            handler: onClickOutside,\n            closeConditional,\n            include: () => [activatorEl.value]\n          }]])]\n        })])]\n      })]);\n    });\n    return {\n      activatorEl,\n      animateClick,\n      contentEl,\n      globalTop,\n      localTop,\n      updateLocation\n    };\n  }\n});\nexport function filterVOverlayProps(props) {\n  return pick(props, Object.keys(VOverlay.props));\n}","map":{"version":3,"mappings":"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","names":["makeActivatorProps","useActivator","makeDimensionProps","useDimension","makeLazyProps","useLazy","makeLocationStrategyProps","useLocationStrategies","makeScrollStrategyProps","useScrollStrategies","makeThemeProps","provideTheme","makeTransitionProps","MaybeTransition","useBackButton","useRouter","useBackgroundColor","useProxiedModel","useHydration","useRtl","useStack","useTeleport","useToggleScope","ClickOutside","animate","convertToUnit","genericComponent","getScrollParent","IN_BROWSER","pick","propsFactory","standardEasing","useRender","computed","mergeProps","ref","Teleport","toHandlers","toRef","Transition","watch","Scrim","props","modelValue","color","rest","default","backgroundColorClasses","value","backgroundColorStyles","makeVOverlayProps","absolute","Boolean","attach","String","Object","closeOnBack","type","contained","contentClass","contentProps","disabled","noClickAnimation","persistent","scrim","zIndex","Number","VOverlay","name","directives","inheritAttrs","emits","e","afterLeave","setup","slots","attrs","emit","model","isActive","get","set","v","teleportTarget","themeClasses","rtlClasses","isRtl","hasContent","onAfterLeave","scrimColor","globalTop","localTop","stackStyles","activatorEl","activatorRef","activatorEvents","contentEvents","scrimEvents","isTop","dimensionStyles","isMounted","root","contentEl","contentStyles","updateLocation","onClickOutside","animateClick","closeConditional","val","window","addEventListener","onKeydown","removeEventListener","immediate","key","router","next","top","scrollParent","document","scrollingElement","scrollTop","transformOrigin","transform","duration","easing","activator","_slots$activator","activatorProps","transition","_slots$default","handler","include","filterVOverlayProps","keys"],"sources":["../../../src/components/VOverlay/VOverlay.tsx"],"sourcesContent":["// Styles\nimport './VOverlay.sass'\n\n// Composables\nimport { makeActivatorProps, useActivator } from './useActivator'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { makeLocationStrategyProps, useLocationStrategies } from './locationStrategies'\nimport { makeScrollStrategyProps, useScrollStrategies } from './scrollStrategies'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackButton, useRouter } from '@/composables/router'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useHydration } from '@/composables/hydration'\nimport { useRtl } from '@/composables/locale'\nimport { useStack } from '@/composables/stack'\nimport { useTeleport } from '@/composables/teleport'\nimport { useToggleScope } from '@/composables/toggleScope'\n\n// Directives\nimport { ClickOutside } from '@/directives/click-outside'\n\n// Utilities\nimport {\n  animate,\n  convertToUnit,\n  genericComponent,\n  getScrollParent,\n  IN_BROWSER,\n  pick,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\nimport {\n  computed,\n  mergeProps,\n  ref,\n  Teleport,\n  toHandlers,\n  toRef,\n  Transition,\n  watch,\n} from 'vue'\n\n// Types\nimport type { BackgroundColorData } from '@/composables/color'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { ExtractPropTypes, PropType, Ref } from 'vue'\n\ninterface ScrimProps {\n  [key: string]: unknown\n  modelValue: boolean\n  color: BackgroundColorData\n}\nfunction Scrim (props: ScrimProps) {\n  const { modelValue, color, ...rest } = props\n  return (\n    <Transition name=\"fade-transition\" appear>\n      { props.modelValue && (\n        <div\n          class={[\n            'v-overlay__scrim',\n            props.color.backgroundColorClasses.value,\n          ]}\n          style={ props.color.backgroundColorStyles.value }\n          { ...rest }\n        />\n      )}\n    </Transition>\n  )\n}\n\nexport type OverlaySlots = MakeSlots<{\n  default: [{ isActive: Ref<boolean> }]\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n}>\n\nexport const makeVOverlayProps = propsFactory({\n  absolute: Boolean,\n  attach: [Boolean, String, Object] as PropType<boolean | string | Element>,\n  closeOnBack: {\n    type: Boolean,\n    default: true,\n  },\n  contained: Boolean,\n  contentClass: null,\n  contentProps: null,\n  disabled: Boolean,\n  noClickAnimation: Boolean,\n  modelValue: Boolean,\n  persistent: Boolean,\n  scrim: {\n    type: [String, Boolean],\n    default: true,\n  },\n  zIndex: {\n    type: [Number, String],\n    default: 2000,\n  },\n\n  ...makeActivatorProps(),\n  ...makeDimensionProps(),\n  ...makeLazyProps(),\n  ...makeLocationStrategyProps(),\n  ...makeScrollStrategyProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps(),\n}, 'v-overlay')\n\nexport const VOverlay = genericComponent<new () => {\n  $props: SlotsToProps<OverlaySlots>\n}>()({\n  name: 'VOverlay',\n\n  directives: { ClickOutside },\n\n  inheritAttrs: false,\n\n  props: makeVOverlayProps(),\n\n  emits: {\n    'click:outside': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { slots, attrs, emit }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const isActive = computed({\n      get: () => model.value,\n      set: v => {\n        if (!(v && props.disabled)) model.value = v\n      },\n    })\n    const { teleportTarget } = useTeleport(computed(() => props.attach || props.contained))\n    const { themeClasses } = provideTheme(props)\n    const { rtlClasses, isRtl } = useRtl()\n    const { hasContent, onAfterLeave } = useLazy(props, isActive)\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null\n    }))\n    const { globalTop, localTop, stackStyles } = useStack(isActive, toRef(props, 'zIndex'))\n    const { activatorEl, activatorRef, activatorEvents, contentEvents, scrimEvents } = useActivator(props, { isActive, isTop: localTop })\n    const { dimensionStyles } = useDimension(props)\n    const isMounted = useHydration()\n\n    watch(() => props.disabled, v => {\n      if (v) isActive.value = false\n    })\n\n    const root = ref<HTMLElement>()\n    const contentEl = ref<HTMLElement>()\n    const { contentStyles, updateLocation } = useLocationStrategies(props, {\n      isRtl,\n      contentEl,\n      activatorEl,\n      isActive,\n    })\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation,\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      emit('click:outside', e)\n\n      if (!props.persistent) isActive.value = false\n      else animateClick()\n    }\n\n    function closeConditional () {\n      return isActive.value && globalTop.value\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown)\n      } else {\n        window.removeEventListener('keydown', onKeydown)\n      }\n    }, { immediate: true })\n\n    function onKeydown (e: KeyboardEvent) {\n      if (e.key === 'Escape' && globalTop.value) {\n        if (!props.persistent) {\n          isActive.value = false\n        } else animateClick()\n      }\n    }\n\n    const router = useRouter()\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (globalTop.value && isActive.value) {\n          next(false)\n          if (!props.persistent) isActive.value = false\n          else animateClick()\n        } else {\n          next()\n        }\n      })\n    })\n\n    const top = ref<number>()\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value)\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop\n        }\n      }\n    })\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick () {\n      if (props.noClickAnimation) return\n\n      contentEl.value && animate(contentEl.value, [\n        { transformOrigin: 'center' },\n        { transform: 'scale(1.03)' },\n        { transformOrigin: 'center' },\n      ], {\n        duration: 150,\n        easing: standardEasing,\n      })\n    }\n\n    useRender(() => (\n      <>\n        { slots.activator?.({\n          isActive: isActive.value,\n          props: mergeProps({\n            ref: activatorRef,\n          }, toHandlers(activatorEvents.value), props.activatorProps),\n        }) }\n\n        { isMounted.value && (\n          <Teleport\n            disabled={ !teleportTarget.value }\n            to={ teleportTarget.value }\n          >\n            { hasContent.value && (\n              <div\n                class={[\n                  'v-overlay',\n                  {\n                    'v-overlay--absolute': props.absolute || props.contained,\n                    'v-overlay--active': isActive.value,\n                    'v-overlay--contained': props.contained,\n                  },\n                  themeClasses.value,\n                  rtlClasses.value,\n                ]}\n                style={[stackStyles.value, { top: convertToUnit(top.value) }]}\n                ref={ root }\n                {...attrs}\n              >\n                <Scrim\n                  color={ scrimColor }\n                  modelValue={ isActive.value && !!props.scrim }\n                  { ...toHandlers(scrimEvents.value) }\n                />\n                <MaybeTransition\n                  appear\n                  persisted\n                  transition={ props.transition }\n                  target={ activatorEl.value }\n                  onAfterLeave={() => { onAfterLeave(); emit('afterLeave') }}\n                >\n                  <div\n                    ref={ contentEl }\n                    v-show={ isActive.value }\n                    v-click-outside={{ handler: onClickOutside, closeConditional, include: () => [activatorEl.value] }}\n                    class={[\n                      'v-overlay__content',\n                      props.contentClass,\n                    ]}\n                    style={[\n                      dimensionStyles.value,\n                      contentStyles.value,\n                    ]}\n                    { ...toHandlers(contentEvents.value) }\n                    { ...props.contentProps }\n                  >\n                    { slots.default?.({ isActive }) }\n                  </div>\n                </MaybeTransition>\n              </div>\n            )}\n          </Teleport>\n        )}\n      </>\n    ))\n\n    return {\n      activatorEl,\n      animateClick,\n      contentEl,\n      globalTop,\n      localTop,\n      updateLocation,\n    }\n  },\n})\n\nexport type VOverlay = InstanceType<typeof VOverlay>\n\nexport function filterVOverlayProps (props: Partial<ExtractPropTypes<ReturnType<typeof makeVOverlayProps>>>) {\n  return pick(props, Object.keys(VOverlay.props) as any)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}