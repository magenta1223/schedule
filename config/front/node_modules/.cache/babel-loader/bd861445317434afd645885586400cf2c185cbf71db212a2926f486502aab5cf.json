{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_textarea = _resolveComponent(\"v-textarea\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, {\n    class: \"posting-container\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" Header \\r\\n\\r\\n            title = models.CharField(verbose_name= '이름', max_length=20, unique=True)\\r\\n            content = models.TextField(verbose_name='내용')\\r\\n\\r\\n            author = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name= '작성자',on_delete=models.CASCADE, null=True) # on_delete : 계정 삭제 시 작성 질문 모두 삭제\\r\\n            create_date = models.DateTimeField(verbose_name= '작성일자', auto_now= True)\\r\\n            modify_date = models.DateTimeField(verbose_name= '수정일자',null=True, blank=True)\\r\\n\\r\\n        \"), _createVNode(_component_v_row, null, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        class: \"text-h2 text-start active mb-2\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(\" Start Project \")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" Title \"), _createVNode(_component_v_row, null, {\n      default: _withCtx(() => [_createVNode(_component_v_col, null, {\n        default: _withCtx(() => [_createVNode(_component_v_text_field, {\n          modelValue: _ctx.title,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.title = $event),\n          placeholder: \"Title\",\n          name: \"title\",\n          type: \"text\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" Content \"), _createCommentVNode(\" Text Editor : TipTap https://uxgjs.tistory.com/220 \"), _createVNode(_component_v_row, null, {\n      default: _withCtx(() => [_createVNode(_component_v_col, null, {\n        default: _withCtx(() => [_createVNode(_component_v_textarea, {\n          modelValue: _ctx.content,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.content = $event),\n          name: \"input-7-4\",\n          value: \"The Woodman set to work at once, and so sharp was his axe that the tree was soon chopped nearly through.\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" button \"), _createVNode(_component_v_row, {\n      class: \"text-start\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        class: \"btn-container\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_btn, {\n          class: \"ma-2\",\n          outlined: \"\",\n          color: \"indigo\",\n          onClick: _cache[2] || (_cache[2] = $event => $options.createProject())\n        }, {\n          default: _withCtx(() => [_createTextVNode(\" Create! \")]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;;;;;;;uBACIA,aA6CcC;IA7CDC,KAAK,EAAG;EAAmB;sBACpC,MASG,CATHC,iiBASG,EACHC,aAGQC;wBAFJ,MACQ,CADRD,aACQE;QADDJ,KAAK,EAAE;MAAgC;0BAAC,MAC/C,kBAD+C,iBAC/C;;;;;QAEJC,8BAAc,EACdC,aAIQC;wBAHJ,MAEQ,CAFRD,aAEQE;0BADJ,MAA0F,CAA1FF,aAA0FG;sBAAnEC,UAAK;qEAALA,UAAK;UAAEC,WAAW,EAAC,OAAO;UAACC,IAAI,EAAC,OAAO;UAACC,IAAI,EAAC;;;;;;QAG5ER,gCAAgB,EAChBA,2EAA2D,EAC3DC,aAQQC;wBAPJ,MAMQ,CANRD,aAMQE;0BALJ,MAIc,CAJdF,aAIcQ;sBAHLJ,YAAO;qEAAPA,YAAO;UAChBE,IAAI,EAAC,WAAW;UAChBG,KAAK,EAAC;;;;;;QAIdV,+BAAe,EACfC,aAWQC;MAXDH,KAAK,EAAC;IAAY;wBACrB,MASQ,CATRE,aASQE;QATDJ,KAAK,EAAC;MAAe;0BACxB,MAOgB,CAPhBE,aAOgBU;UANRZ,KAAK,EAAC,MAAM;UACZa,QAAQ,EAAR,EAAQ;UACRC,KAAK,EAAC,QAAQ;UACbC,OAAK,sCAAEC,sBAAa;;4BACpB,MAED,kBAFC,WAED","names":["_createBlock","_component_v_container","class","_createCommentVNode","_createVNode","_component_v_row","_component_v_col","_component_v_text_field","_ctx","placeholder","name","type","_component_v_textarea","value","_component_v_btn","outlined","color","onClick","$options"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\ProjectCreate.vue"],"sourcesContent":["<template>\r\n    <v-container class = \"posting-container\">\r\n        <!-- Header \r\n\r\n            title = models.CharField(verbose_name= '이름', max_length=20, unique=True)\r\n            content = models.TextField(verbose_name='내용')\r\n\r\n            author = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name= '작성자',on_delete=models.CASCADE, null=True) # on_delete : 계정 삭제 시 작성 질문 모두 삭제\r\n            create_date = models.DateTimeField(verbose_name= '작성일자', auto_now= True)\r\n            modify_date = models.DateTimeField(verbose_name= '수정일자',null=True, blank=True)\r\n\r\n        -->\r\n        <v-row>\r\n            <v-col class =\"text-h2 text-start active mb-2\"> Start Project\r\n            </v-col>\r\n        </v-row>\r\n        <!-- Title -->\r\n        <v-row>\r\n            <v-col> \r\n                <v-text-field v-model=\"title\" placeholder=\"Title\" name=\"title\" type=\"text\"></v-text-field>\r\n            </v-col>\r\n        </v-row>\r\n        <!-- Content -->\r\n        <!-- Text Editor : TipTap https://uxgjs.tistory.com/220 -->\r\n        <v-row>\r\n            <v-col> \r\n                <v-textarea\r\n                v-model=\"content\"\r\n                name=\"input-7-4\"\r\n                value=\"The Woodman set to work at once, and so sharp was his axe that the tree was soon chopped nearly through.\"\r\n                ></v-textarea>\r\n            </v-col>\r\n        </v-row>\r\n        <!-- button -->\r\n        <v-row class=\"text-start\">\r\n            <v-col class=\"btn-container\">\r\n                <v-btn\r\n                        class=\"ma-2\"\r\n                        outlined\r\n                        color=\"indigo\"\r\n                        @click=\"createProject()\"\r\n                        >\r\n                        Create!  \r\n                        </v-btn>\r\n            </v-col>\r\n        </v-row>\r\n    </v-container>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport setToken from \"@/utils/auth.js\"\r\n// import to from \"@/utils/router.js\"\r\n// import router from \"../../router/router.js\"\r\n\r\nlet url = \"http://127.0.0.1:8000/api/project/\";  // 장고 drf 서버 주소\r\n\r\n\r\nexport default {\r\n    \r\n    name : \"ProjectCreate\",\r\n    \r\n    data : () => {\r\n        return {\r\n            title : \"\",\r\n            content : \"\",\r\n            update : false,\r\n            }\r\n        },\r\n\r\n    components : {\r\n    },\r\n    \r\n    // param이 바뀌어도 갱신이 되지 않음\r\n    // board는 이미 mount가 끝났기 때문\r\n    // 그래서 mounted를 call하지 않음\r\n    // mounted를 method화 하고, param을 watch하면서 변경될때마다 call하면 됨\r\n    methods: {\r\n        createProject : function(){\r\n            axios({\r\n                method : \"POST\",\r\n                url : url,\r\n                headers : setToken(),\r\n                params : {\r\n                    user_id : localStorage.getItem('user'),\r\n                    title : this.title,\r\n                    content: this.content\r\n                }\r\n            })\r\n            .then(\r\n                this.$router.push({\r\n                    name : \"home\",\r\n                })\r\n            )\r\n        },\r\n\r\n        // updateProject : function(){\r\n        //     axios({\r\n        //         method : \"PUT\",\r\n        //         url : url + this.wrapper_id + '/',\r\n        //         headers : setToken(),\r\n        //         params : {\r\n        //             content_type : \"post\",\r\n        //             category_id : this.category_id,\r\n        //             user_id : localStorage.getItem('user'),\r\n        //             title : this.title,\r\n        //             content: this.content\r\n        //         }\r\n        //     }).then(\r\n        //         router.push({\r\n        //             name : \"post_retrieval\",\r\n        //             params : {\r\n        //                 category_id : this.category_id,\r\n        //                 wrapper_id : this.wrapper_id,\r\n        //                 content_type : 'post',\r\n        //             }\r\n        //         })\r\n        //         )\r\n        // },\r\n        \r\n\r\n        // createOrUpdate : function(){\r\n        //     if (this.update){\r\n        //         this.updatePost()\r\n        //     } else {\r\n        //         this.createPost()\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    mounted() {\r\n        // update인 경우와 아닌 경우\r\n        // update면 값을 미리 세팅해야 함\r\n        // this.update = this.$route.params.update\r\n        // this.category_id = this.$route.params.category_id\r\n        // this.wrapper_id = this.$route.params.wrapper_id\r\n\r\n        // console.log(this.$route.params)\r\n\r\n        // if (this.update) {\r\n        //     axios({\r\n        //         method : \"GET\",\r\n        //         url : url + this.wrapper_id,\r\n        //         headers : setToken(),\r\n        //         params : {\r\n        //             content_type : \"post\",\r\n        //         }\r\n        //     })\r\n        //     .then((response) => {\r\n        //         this.title = response.data.post.title\r\n        //         this.content = response.data.post.content\r\n        //     })\r\n        //     .catch(response => {\r\n        //         console.log(\"Failed\", response);\r\n        //     });\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .btn-container{\r\n        margin-left: auto!important;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}