{"ast":null,"code":"import axios from \"axios\";\nimport setToken from \"@/utils/auth.js\";\nlet url = \"http://127.0.0.1:8000/api/project/\"; // 장고 drf 서버 주소\n\nexport default {\n  name: \"ProjectRetrieve\",\n  data: () => {\n    return {\n      title: \"\",\n      content: \"\",\n      update: false\n    };\n  },\n  components: {},\n  // param이 바뀌어도 갱신이 되지 않음\n  // board는 이미 mount가 끝났기 때문\n  // 그래서 mounted를 call하지 않음\n  // mounted를 method화 하고, param을 watch하면서 변경될때마다 call하면 됨\n  methods: {\n    retrieveProject: function () {\n      axios({\n        method: \"GET\",\n        url: url + '/' + this.$route.params.project_id,\n        headers: setToken(),\n        params: {\n          user_id: localStorage.getItem('user')\n        }\n      }).then(console.log('cex'));\n    }\n  },\n  mounted() {\n    this.retrieveProject();\n    // update인 경우와 아닌 경우\n    // update면 값을 미리 세팅해야 함\n    // this.update = this.$route.params.update\n    // this.category_id = this.$route.params.category_id\n    // this.wrapper_id = this.$route.params.wrapper_id\n\n    // console.log(this.$route.params)\n\n    // if (this.update) {\n    //     axios({\n    //         method : \"GET\",\n    //         url : url + this.wrapper_id,\n    //         headers : setToken(),\n    //         params : {\n    //             content_type : \"post\",\n    //         }\n    //     })\n    //     .then((response) => {\n    //         this.title = response.data.post.title\n    //         this.content = response.data.post.content\n    //     })\n    //     .catch(response => {\n    //         console.log(\"Failed\", response);\n    //     });\n    // }\n  }\n};","map":{"version":3,"mappings":"AAmDA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,iBAAgB;AAGrC,IAAIC,GAAE,GAAI,oCAAoC,EAAG;;AAGjD,eAAe;EAEXC,IAAG,EAAI,iBAAiB;EAExBC,IAAG,EAAI,MAAM;IACT,OAAO;MACHC,KAAI,EAAI,EAAE;MACVC,OAAM,EAAI,EAAE;MACZC,MAAK,EAAI;IACT;EACJ,CAAC;EAELC,UAAS,EAAI,CACb,CAAC;EAED;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACLC,eAAc,EAAI,YAAU;MACxBV,KAAK,CAAC;QACFW,MAAK,EAAI,KAAK;QACdT,GAAE,EAAIA,GAAE,GAAI,GAAE,GAAI,IAAI,CAACU,MAAM,CAACC,MAAM,CAACC,UAAU;QAC/CC,OAAM,EAAId,QAAQ,EAAE;QACpBY,MAAK,EAAI;UACLG,OAAM,EAAIC,YAAY,CAACC,OAAO,CAAC,MAAM;QACzC;MACJ,CAAC,EACAC,IAAI,CAEDC,OAAO,CAACC,GAAG,CAAC,KAAK,EACrB;IACJ;EAEJ,CAAC;EAEDC,OAAO,GAAG;IACN,IAAI,CAACZ,eAAe,EAAC;IACrB;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGJ;AAEA","names":["axios","setToken","url","name","data","title","content","update","components","methods","retrieveProject","method","$route","params","project_id","headers","user_id","localStorage","getItem","then","console","log","mounted"],"sourceRoot":"","sources":["C:\\schedule\\config\\front\\src\\views\\ProjectRetrieve.vue"],"sourcesContent":["<template>\r\n    <v-container class = \"posting-container\">\r\n        <!-- Header \r\n\r\n            title = models.CharField(verbose_name= '이름', max_length=20, unique=True)\r\n            content = models.TextField(verbose_name='내용')\r\n\r\n            author = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name= '작성자',on_delete=models.CASCADE, null=True) # on_delete : 계정 삭제 시 작성 질문 모두 삭제\r\n            create_date = models.DateTimeField(verbose_name= '작성일자', auto_now= True)\r\n            modify_date = models.DateTimeField(verbose_name= '수정일자',null=True, blank=True)\r\n\r\n        -->\r\n        <v-row>\r\n            <v-col class =\"text-h2 text-start active mb-2\"> Start Project\r\n            </v-col>\r\n        </v-row>\r\n        <!-- Title -->\r\n        <v-row>\r\n            <v-col> \r\n                <v-text-field v-model=\"title\" placeholder=\"Title\" name=\"title\" type=\"text\"></v-text-field>\r\n            </v-col>\r\n        </v-row>\r\n        <!-- Content -->\r\n        <!-- Text Editor : TipTap https://uxgjs.tistory.com/220 -->\r\n        <v-row>\r\n            <v-col> \r\n                <v-textarea\r\n                v-model=\"content\"\r\n                name=\"input-7-4\"\r\n                :value=\"content\"\r\n                ></v-textarea>\r\n            </v-col>\r\n        </v-row>\r\n        <!-- button -->\r\n        <v-row class=\"text-start\">\r\n            <v-col class=\"btn-container\">\r\n                <v-btn\r\n                        class=\"ma-2\"\r\n                        outlined\r\n                        color=\"indigo\"\r\n                        @click=\"createProject()\"\r\n                        >\r\n                        Create!  \r\n                        </v-btn>\r\n            </v-col>\r\n        </v-row>\r\n    </v-container>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport setToken from \"@/utils/auth.js\"\r\n\r\n\r\nlet url = \"http://127.0.0.1:8000/api/project/\";  // 장고 drf 서버 주소\r\n\r\n\r\nexport default {\r\n    \r\n    name : \"ProjectRetrieve\",\r\n\r\n    data : () => {\r\n        return {\r\n            title : \"\",\r\n            content : \"\",\r\n            update : false,\r\n            }\r\n        },\r\n\r\n    components : {\r\n    },\r\n    \r\n    // param이 바뀌어도 갱신이 되지 않음\r\n    // board는 이미 mount가 끝났기 때문\r\n    // 그래서 mounted를 call하지 않음\r\n    // mounted를 method화 하고, param을 watch하면서 변경될때마다 call하면 됨\r\n    methods: {\r\n        retrieveProject : function(){\r\n            axios({\r\n                method : \"GET\",\r\n                url : url + '/' + this.$route.params.project_id,\r\n                headers : setToken(),\r\n                params : {\r\n                    user_id : localStorage.getItem('user'),\r\n                }\r\n            })\r\n            .then(\r\n\r\n                console.log('cex')\r\n            )\r\n        },\r\n\r\n    },\r\n\r\n    mounted() {\r\n        this.retrieveProject()\r\n        // update인 경우와 아닌 경우\r\n        // update면 값을 미리 세팅해야 함\r\n        // this.update = this.$route.params.update\r\n        // this.category_id = this.$route.params.category_id\r\n        // this.wrapper_id = this.$route.params.wrapper_id\r\n\r\n        // console.log(this.$route.params)\r\n\r\n        // if (this.update) {\r\n        //     axios({\r\n        //         method : \"GET\",\r\n        //         url : url + this.wrapper_id,\r\n        //         headers : setToken(),\r\n        //         params : {\r\n        //             content_type : \"post\",\r\n        //         }\r\n        //     })\r\n        //     .then((response) => {\r\n        //         this.title = response.data.post.title\r\n        //         this.content = response.data.post.content\r\n        //     })\r\n        //     .catch(response => {\r\n        //         console.log(\"Failed\", response);\r\n        //     });\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n    .btn-container{\r\n        margin-left: auto!important;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}